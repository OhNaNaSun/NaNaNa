{"version":3,"sources":["Home/Home.tsx","components/Content/MdEditor.tsx","components/Content/MdContent.tsx","components/Sidebar.tsx","components/BreadCrumbHeader.tsx","App/Page.tsx","App/App.tsx","serviceWorker.js","index.tsx"],"names":["Banner","styled","div","process","Divider","Home","useState","fileDirs","setFileDirs","useEffect","axios","get","then","res","data","catch","err","justify","style","marginTop","span","Object","entries","map","categoryName","categoryDirs","key","marginBottom","categoryDir","fileDirName","fileNames","className","counterIncrement","fileName","href","replace","converter","Showdown","tables","simplifiedAutoLink","strikethrough","tasklists","MdEditor","mdContent","changeMdContent","selectedTab","changeSelectedTab","minEditorHeight","value","onChange","newValue","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","makeHtml","Content","Layout","MdContent","currentItemPath","returnNewMdContent","setMdContent","setSelectedTab","split","encodeURIComponent","isEdit","margin","minHeight","Sider","SubMenu","Menu","AppSidebar","setCurrentItem","refreshSideBarCount","keys","length","values","width","mode","selectedKeys","height","borderRight","dirName","icon","UserOutlined","title","Item","onClick","innerDirName","innerFileName","BreadCrumbHeader","saveItem","addNewItem","filePath","setFilePath","currentFileName","setCurrentFileName","fileFullPath","pop","join","e","target","SaveOutlined","PlusOutlined","App","pathname","useLocation","setCurrentItemPath","setRefreshSideBarCount","padding","path","post","name","status","message","success","statusText","Page","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.9d48778f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { Row, Col } from 'antd'\nimport styled from 'styled-components'\n\nconst Banner = styled.div`\n  background-image: url(${process.env.PUBLIC_URL}/anime-girl.jpeg);\n  background-size: cover;\n  height: 640px;\n  background-position-y: -120px;\n`\nconst Divider = styled.div`\n  border-bottom: 1px solid #ebebeb;\n  margin-bottom: 16px;\n  padding-bottom: 8px;\n`\n\ntype itemType = { [key: string]: string[] }\ninterface DirectoryType {\n  [key: string]: Array<itemType>\n}\nconst Home: React.FC = () => {\n  const [fileDirs, setFileDirs] = useState({})\n  useEffect(() => {\n    axios\n      .get(`./api/files`)\n      .then((res) => {\n        setFileDirs(res.data)\n      })\n      .catch((err) => {})\n  }, [])\n\n  //   const [categoryName, categoryDirs] = Object.entries(fileDirs)\n  return (\n    <>\n      <Banner />\n      <Row justify=\"center\" style={{ marginTop: '20px' }}>\n        <Col span={16}>\n          {Object.entries(fileDirs as DirectoryType).map(([categoryName, categoryDirs]) => (\n            <div key={categoryName} style={{ marginTop: '40px' }}>\n              <h2 style={{ marginBottom: '40px' }}>{categoryName}</h2>\n              {categoryDirs.map((categoryDir) =>\n                Object.entries(categoryDir).map(([fileDirName, fileNames]) => (\n                  <section\n                    key={fileDirName}\n                    className=\"section\"\n                    style={{ marginBottom: '24px', counterIncrement: 'a' }}\n                  >\n                    <h3>{fileDirName}</h3>\n                    <Divider />\n                    <ul className=\"list\">\n                      {fileNames.map((fileName: string) => (\n                        <li className=\"list_item\" key={fileName}>\n                          <div>\n                            <a href={`./${fileDirName}/${fileName}`}>{fileName.replace('.md', '')}</a>\n                          </div>\n                        </li>\n                      ))}\n                    </ul>\n                  </section>\n                ))\n              )}\n            </div>\n          ))}\n        </Col>\n      </Row>\n    </>\n  )\n}\nexport default Home\n","import React from 'react'\nimport ReactMde from 'react-mde'\nimport * as Showdown from 'showdown'\nimport 'react-mde/lib/styles/css/react-mde-all.css'\n\ninterface MdEditorType {\n  mdContent: string\n  changeMdContent: Function\n  selectedTab: 'write' | 'preview'\n  changeSelectedTab: (tab: 'preview' | 'write') => void\n}\nconst converter = new Showdown.Converter({\n  tables: true,\n  simplifiedAutoLink: true,\n  strikethrough: true,\n  tasklists: true,\n})\nconst MdEditor: React.FC<MdEditorType> = ({ mdContent, changeMdContent, selectedTab, changeSelectedTab }) => {\n  return (\n    <div className=\"container\">\n      <ReactMde\n        minEditorHeight={600}\n        value={mdContent}\n        onChange={(newValue): void => {\n          changeMdContent(newValue)\n        }}\n        selectedTab={selectedTab as MdEditorType['selectedTab']}\n        onTabChange={changeSelectedTab}\n        generateMarkdownPreview={(markdown: string): Promise<any> => Promise.resolve(converter.makeHtml(markdown))}\n      />\n    </div>\n  )\n}\nexport default MdEditor\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { Layout } from 'antd'\nimport MdEditor from './MdEditor'\n\nconst { Content } = Layout\ninterface MdContentType {\n  currentItemPath: string\n  returnNewMdContent: Function\n}\n\nconst MdContent: React.FC<MdContentType> = ({ currentItemPath, returnNewMdContent }) => {\n  const [mdContent, setMdContent] = useState('')\n  const [selectedTab, setSelectedTab] = useState('preview')\n  useEffect(() => {\n    if (currentItemPath.split('/')[1]) {\n      axios\n        .get(`./api/files/${encodeURIComponent(currentItemPath)}`)\n        .then((res) => {\n          setMdContent(res.data)\n        })\n        .catch((err) => {})\n    } else {\n      setMdContent('')\n    }\n  }, [currentItemPath, setMdContent])\n  useEffect(() => {\n    const fileFullPath = currentItemPath.split('/')\n    const isEdit = !fileFullPath[1]\n    setSelectedTab(isEdit ? 'write' : 'preview')\n  }, [currentItemPath])\n  useEffect(() => {\n    returnNewMdContent(mdContent)\n  }, [mdContent, returnNewMdContent])\n  return (\n    <Content\n      className=\"site-layout-background\"\n      style={{\n        margin: 0,\n        minHeight: 280,\n      }}\n    >\n      <MdEditor\n        mdContent={mdContent}\n        selectedTab={selectedTab as 'preview' | 'write'}\n        changeSelectedTab={setSelectedTab}\n        changeMdContent={setMdContent}\n      />\n    </Content>\n  )\n}\nexport default MdContent\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { Layout, Menu } from 'antd'\nimport { UserOutlined } from '@ant-design/icons'\n\nconst { Sider } = Layout\nconst { SubMenu } = Menu\ntype itemType = string | { [key: string]: string[] }\ninterface DirectoryType {\n  [key: string]: Array<itemType>\n}\ninterface AppSidebarType {\n  setCurrentItem: Function\n  refreshSideBarCount: number\n  currentItemPath: string\n}\nconst AppSidebar: React.FC<AppSidebarType> = ({ currentItemPath, setCurrentItem, refreshSideBarCount }) => {\n  const [fileDirs, setFileDirs] = useState({})\n  useEffect(() => {\n    axios\n      .get(`${process.env.PUBLIC_URL}/api/files`)\n      .then((res) => {\n        setFileDirs(res.data)\n      })\n      .catch((err) => {})\n  }, [refreshSideBarCount])\n  useEffect(() => {\n    if (Object.keys(fileDirs).length > 0) {\n      setCurrentItem(currentItemPath || `${Object.keys(fileDirs)[0]}/${Object.values(fileDirs as DirectoryType)[0][0]}`)\n    }\n  }, [currentItemPath, fileDirs, setCurrentItem])\n  return (\n    <Sider width={300} className=\"site-layout-background\">\n      {Object.keys(fileDirs).length && (\n        <Menu mode=\"inline\" selectedKeys={[currentItemPath.split('/')[1]]} style={{ height: '100%', borderRight: 0 }}>\n          {Object.keys(fileDirs).map((dirName: string) => (\n            <SubMenu key={dirName} icon={<UserOutlined />} title={dirName}>\n              {(fileDirs as DirectoryType)[dirName].map((fileName: itemType) =>\n                typeof fileName === 'string' ? (\n                  <Menu.Item\n                    key={fileName}\n                    title={fileName}\n                    onClick={(): void => {\n                      setCurrentItem(`${dirName}/${fileName}`)\n                    }}\n                  >\n                    {fileName.split('.')[0]}\n                  </Menu.Item>\n                ) : (\n                  Object.keys(fileName).map((innerDirName) => (\n                    <SubMenu key={innerDirName} title={innerDirName}>\n                      {fileName[innerDirName].map((innerFileName: string) => (\n                        <Menu.Item\n                          key={innerFileName}\n                          onClick={(): void => {\n                            setCurrentItem(`${dirName}/${innerDirName}/${innerFileName}`)\n                          }}\n                        >\n                          {innerFileName}\n                        </Menu.Item>\n                      ))}\n                    </SubMenu>\n                  ))\n                )\n              )}\n            </SubMenu>\n          ))}\n        </Menu>\n      )}\n    </Sider>\n  )\n}\nexport default AppSidebar\n","import React, { useState, useEffect } from 'react'\nimport { Input, Space } from 'antd'\nimport { SaveOutlined, PlusOutlined } from '@ant-design/icons'\n\ninterface BreadCrumbHeaderType {\n  currentItemPath: string\n  saveItem: Function\n  addNewItem: Function\n}\nconst BreadCrumbHeader: React.FC<BreadCrumbHeaderType> = ({ currentItemPath, saveItem, addNewItem }) => {\n  const [filePath, setFilePath] = useState('')\n  const [currentFileName, setCurrentFileName] = useState('')\n\n  useEffect(() => {\n    const fileFullPath = currentItemPath.split('/')\n    const fileName = fileFullPath.pop()\n    setFilePath(fileFullPath.join(' / '))\n    setCurrentFileName(fileName as string)\n  }, [currentItemPath])\n\n  return (\n    <div style={{ margin: '16px 0' }}>\n      <Space>\n        {filePath} /\n        <Input\n          style={{ width: '200px' }}\n          value={currentFileName}\n          onChange={(e): void => {\n            setCurrentFileName(e.target.value)\n          }}\n        />\n        <SaveOutlined\n          onClick={(): void => {\n            saveItem(`${filePath}/${currentFileName}`)\n          }}\n        />\n        <PlusOutlined\n          onClick={(): void => {\n            addNewItem()\n          }}\n        />\n      </Space>\n    </div>\n  )\n}\nexport default BreadCrumbHeader\n","import React, { useState } from 'react'\nimport './App.css'\nimport { Layout, message } from 'antd'\nimport axios from 'axios'\nimport { useLocation } from 'react-router-dom'\nimport MdContent from '../components/Content/MdContent'\nimport AppSidebar from '../components/Sidebar'\nimport BreadCrumbHeader from '../components/BreadCrumbHeader'\n\nconst App: React.FC = () => {\n  const { pathname } = useLocation()\n  const [currentItemPath, setCurrentItemPath] = useState(pathname)\n  const [refreshSideBarCount, setRefreshSideBarCount] = useState(0)\n  const [mdContent, setMdContent] = useState('')\n  const postMdContent = (fileFullPath: string): void => {\n    axios.post('./api/files/upload', { name: fileFullPath, mdContent }).then((res) => {\n      if (res.status === 201) {\n        setCurrentItemPath(fileFullPath)\n        setRefreshSideBarCount(refreshSideBarCount + 1)\n      }\n      message.success(res.statusText)\n    })\n  }\n  return (\n    <Layout>\n      <AppSidebar\n        currentItemPath={currentItemPath}\n        setCurrentItem={setCurrentItemPath}\n        refreshSideBarCount={refreshSideBarCount}\n      />\n      <Layout style={{ padding: '0 24px 24px' }}>\n        <BreadCrumbHeader\n          currentItemPath={currentItemPath}\n          saveItem={(path: string): void => {\n            postMdContent(path)\n          }}\n          addNewItem={(): void => {\n            setCurrentItemPath(currentItemPath.split('/')[0])\n          }}\n        />\n        <MdContent\n          currentItemPath={currentItemPath}\n          returnNewMdContent={(value: string): void => {\n            setMdContent(value)\n          }}\n        />\n      </Layout>\n    </Layout>\n  )\n}\nexport default App\n","import React from 'react'\nimport './App.css'\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport Home from '../Home/Home'\nimport Page from './Page'\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/:fileId\">\n          <Page />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}