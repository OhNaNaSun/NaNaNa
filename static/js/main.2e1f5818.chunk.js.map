{"version":3,"sources":["Content/MdEditor.tsx","Content/Content.tsx","Header/Header.tsx","Sidebar/Sidebar.tsx","App/App.tsx","serviceWorker.js","index.tsx"],"names":["loadSuggestions","text","Promise","accept","reject","setTimeout","suggestions","preview","value","filter","i","toLowerCase","includes","converter","Showdown","tables","simplifiedAutoLink","strikethrough","tasklists","MdEditor","mdValue","useState","setValue","selectedTab","setSelectedTab","useEffect","className","onChange","onTabChange","generateMarkdownPreview","markdown","resolve","makeHtml","minEditorHeight","childProps","writeButton","tabIndex","AppContent","currentItem","mdContent","setMdContent","axios","get","then","res","data","catch","err","Header","Layout","AppHeader","theme","mode","defaultSelectedKeys","Item","key","Sider","SubMenu","Menu","AppSidebar","setCurrentItem","directory","setDir","Object","keys","length","firstDir","width","defaultOpenKeys","style","height","borderRight","map","dirName","icon","UserOutlined","title","fileName","onClick","Content","App","padding","margin","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.2e1f5818.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ReactMde from 'react-mde'\nimport * as Showdown from 'showdown'\nimport 'react-mde/lib/styles/css/react-mde-all.css'\n\ninterface MdEditorType {\n  mdValue: string\n}\ntype selectedTabType = 'preview' | 'write' | undefined\nconst loadSuggestions = (text: string): Promise<any> => {\n  return new Promise((accept, reject) => {\n    setTimeout(() => {\n      const suggestions = [\n        {\n          preview: 'Andre',\n          value: '@andre',\n        },\n        {\n          preview: 'Angela',\n          value: '@angela',\n        },\n        {\n          preview: 'David',\n          value: '@david',\n        },\n        {\n          preview: 'Louise',\n          value: '@louise',\n        },\n      ].filter((i) => i.preview.toLowerCase().includes(text.toLowerCase()))\n      accept(suggestions)\n    }, 250)\n  })\n}\n\nconst converter = new Showdown.Converter({\n  tables: true,\n  simplifiedAutoLink: true,\n  strikethrough: true,\n  tasklists: true,\n})\nconst MdEditor: React.FC<MdEditorType> = ({ mdValue }) => {\n  const [value, setValue] = useState('')\n  const [selectedTab, setSelectedTab] = useState('preview')\n  useEffect(() => {\n    setValue(mdValue)\n  }, [mdValue])\n  return (\n    <div className=\"container\">\n      <ReactMde\n        value={value}\n        onChange={setValue}\n        selectedTab={selectedTab as selectedTabType}\n        onTabChange={setSelectedTab}\n        generateMarkdownPreview={(markdown: string): Promise<any> => Promise.resolve(converter.makeHtml(markdown))}\n        loadSuggestions={loadSuggestions}\n        minEditorHeight={800}\n        childProps={{\n          writeButton: {\n            tabIndex: -1,\n          },\n        }}\n      />\n    </div>\n  )\n}\nexport default MdEditor\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport MdEditor from './MdEditor'\n\ninterface AppContentType {\n  currentItem: string\n}\nconst AppContent: React.FC<AppContentType> = ({ currentItem }) => {\n  const [mdContent, setMdContent] = useState('')\n  useEffect(() => {\n    axios\n      .get(`./api/docs/${currentItem}.md`)\n      .then((res) => {\n        setMdContent(res.data)\n      })\n      .catch((err) => {})\n  }, [currentItem])\n  return <>{mdContent && <MdEditor mdValue={mdContent} />}</>\n}\nexport default AppContent\n","import React from 'react'\nimport { Menu, Layout } from 'antd'\n\nconst { Header } = Layout\n\nconst AppHeader: React.FC = () => {\n  return (\n    <Header className=\"header\">\n      <div className=\"logo\" />\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\n        <Menu.Item key=\"1\">nav 1</Menu.Item>\n        <Menu.Item key=\"2\">nav 2</Menu.Item>\n        <Menu.Item key=\"3\">nav 3</Menu.Item>\n      </Menu>\n    </Header>\n  )\n}\nexport default AppHeader\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { Layout, Menu } from 'antd'\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons'\n\nconst { Sider } = Layout\nconst { SubMenu } = Menu\ninterface DirectoryType {\n  [key: string]: string[]\n}\ninterface AppSidebarType {\n  setCurrentItem: Function\n}\nconst AppSidebar: React.FC<AppSidebarType> = ({ setCurrentItem }) => {\n  const [directory, setDir] = useState({})\n  useEffect(() => {\n    axios\n      .get(`./api/docs/dir.json`)\n      .then((res) => {\n        setDir(res.data)\n      })\n      .catch((err) => {})\n  }, [])\n  useEffect(() => {\n    if (Object.keys(directory).length > 0) {\n      const firstDir = Object.keys(directory)[0]\n      setCurrentItem(`${firstDir}/${(directory as DirectoryType)[firstDir][0]}`)\n    }\n  }, [directory, setCurrentItem])\n  return (\n    <Sider width={300} className=\"site-layout-background\">\n      <Menu\n        mode=\"inline\"\n        defaultSelectedKeys={['Two Sum']}\n        defaultOpenKeys={['Algorithm']}\n        style={{ height: '100%', borderRight: 0 }}\n      >\n        {directory &&\n          Object.keys(directory as DirectoryType).map((dirName: string) => (\n            <SubMenu key={dirName} icon={<UserOutlined />} title={dirName}>\n              {(directory as DirectoryType)[dirName].map((fileName: string) => (\n                <Menu.Item\n                  key={fileName}\n                  title={fileName}\n                  onClick={() => {\n                    setCurrentItem(`${dirName}/${fileName}`)\n                  }}\n                >\n                  {fileName}\n                </Menu.Item>\n              ))}\n            </SubMenu>\n          ))}\n      </Menu>\n    </Sider>\n  )\n}\nexport default AppSidebar\n","import React, { useState } from 'react'\nimport './App.css'\nimport { Layout, Breadcrumb } from 'antd'\nimport AppContent from '../Content/Content'\nimport AppHeader from '../Header/Header'\nimport AppSidebar from '../Sidebar/Sidebar'\n\nconst { Content } = Layout\nconst App: React.FC = () => {\n  const [currentItem, setCurrentItem] = useState('')\n  return (\n    <Layout>\n      <AppHeader />\n      <Layout>\n        <AppSidebar setCurrentItem={setCurrentItem} />\n        <Layout style={{ padding: '0 24px 24px' }}>\n          <Breadcrumb style={{ margin: '16px 0' }}>\n            <Breadcrumb.Item>Home</Breadcrumb.Item>\n            <Breadcrumb.Item>List</Breadcrumb.Item>\n            <Breadcrumb.Item>App</Breadcrumb.Item>\n          </Breadcrumb>\n          {currentItem && (\n            <Content\n              className=\"site-layout-background\"\n              style={{\n                padding: 24,\n                margin: 0,\n                minHeight: 280,\n              }}\n            >\n              <AppContent currentItem={currentItem} />\n            </Content>\n          )}\n        </Layout>\n      </Layout>\n    </Layout>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}