{"version":3,"sources":["Pages/Home/index.tsx","Pages/Docs/Content/MdEditor.tsx","Pages/Docs/Content/MdContent.tsx","Pages/Docs/Sidebar.tsx","Pages/Docs/BreadCrumb.tsx","Pages/Docs/index.tsx","App/App.tsx","serviceWorker.js","index.tsx"],"names":["Banner","styled","div","process","Divider","Home","useState","fileDirs","setFileDirs","useEffect","axios","get","then","res","data","catch","err","style","fontSize","fontFamily","position","left","top","color","stdTypingDelay","avgTypingDelay","cursor","show","Delay","ms","justify","marginTop","span","Object","entries","map","categoryName","categoryDirs","key","marginBottom","categoryDir","fileDirName","fileNames","className","counterIncrement","fileName","href","replace","converter","Showdown","tables","simplifiedAutoLink","strikethrough","tasklists","MdEditor","mdContent","changeMdContent","selectedTab","changeSelectedTab","readOnly","minEditorHeight","value","onChange","newValue","classes","reactMde","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","makeHtml","Content","Layout","MdContent","returnNewMdContent","currentDirName","currentCateName","currentFileName","isReadOnly","setMdContent","setSelectedTab","margin","minHeight","Sider","SubMenu","Menu","AppSidebar","width","keys","length","mode","selectedKeys","defaultOpenKeys","height","borderRight","dirName","icon","UserOutlined","title","Item","to","split","BreadCrumbHeader","saveItem","setFileName","HomeOutlined","e","target","SaveOutlined","onClick","PlusOutlined","Container","useLocation","pathname","setIsReadOnly","padding","BreadCrumb","newFileName","post","name","message","success","statusText","error","postMdContent","App","path","Docs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.22ee0cf2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { Row, Col, Popconfirm, Button } from 'antd'\nimport styled from 'styled-components'\nimport Typist from 'react-typist'\n\nconst Banner = styled.div`\n  background-image: url(${process.env.PUBLIC_URL}/anime-girl.jpeg);\n  background-size: cover;\n  height: 600px;\n  background-position-y: -120px;\n`\nconst Divider = styled.div`\n  border-bottom: 1px solid #ebebeb;\n  margin-bottom: 16px;\n  padding-bottom: 8px;\n`\n\ntype itemType = { [key: string]: string[] }\ninterface DirectoryType {\n  [key: string]: Array<itemType>\n}\nconst Home: React.FC = () => {\n  const [fileDirs, setFileDirs] = useState({})\n  useEffect(() => {\n    axios\n      .get(`./api/files`)\n      .then((res) => {\n        setFileDirs(res.data)\n      })\n      .catch((err) => {})\n  }, [])\n\n  return (\n    <>\n      <Banner>\n        <div\n          style={{\n            fontSize: '16px',\n            fontFamily: 'Courier',\n            position: 'absolute',\n            left: '404px',\n            top: '326px',\n            color: 'white',\n          }}\n        >\n          <Typist stdTypingDelay={10} avgTypingDelay={40} cursor={{ show: false }}>\n            Hello World\n            <Typist.Delay ms={500} />\n          </Typist>\n        </div>\n      </Banner>\n      <Row justify=\"center\" style={{ marginTop: '20px' }}>\n        <Col span={16}>\n          {Object.entries(fileDirs as DirectoryType).map(([categoryName, categoryDirs]) => (\n            <div key={categoryName} style={{ marginTop: '40px' }}>\n              <h2 style={{ marginBottom: '40px' }}>{categoryName}</h2>\n              {categoryDirs.map((categoryDir) =>\n                Object.entries(categoryDir).map(([fileDirName, fileNames]) => (\n                  <section\n                    key={fileDirName}\n                    className=\"section\"\n                    style={{ marginBottom: '24px', counterIncrement: 'a' }}\n                  >\n                    <h3>{fileDirName}</h3>\n                    <Divider />\n                    <ul className=\"list\">\n                      {fileNames.map((fileName: string) => (\n                        <li className=\"list_item\" key={fileName}>\n                          <div>\n                            <a href={`./${categoryName}/${fileDirName}/${fileName}`}>{fileName.replace('.md', '')}</a>\n                          </div>\n                        </li>\n                      ))}\n                    </ul>\n                  </section>\n                ))\n              )}\n            </div>\n          ))}\n        </Col>\n      </Row>\n    </>\n  )\n}\nexport default Home\n","import React from 'react'\nimport ReactMde from 'react-mde'\nimport * as Showdown from 'showdown'\nimport 'react-mde/lib/styles/css/react-mde-all.css'\n\ninterface MdEditorType {\n  mdContent: string\n  changeMdContent: Function\n  selectedTab: 'write' | 'preview'\n  changeSelectedTab: (tab: 'preview' | 'write') => void\n  readOnly: boolean\n}\nconst converter = new Showdown.Converter({\n  tables: true,\n  simplifiedAutoLink: true,\n  strikethrough: true,\n  tasklists: true,\n})\nconst MdEditor: React.FC<MdEditorType> = ({ mdContent, changeMdContent, selectedTab, changeSelectedTab, readOnly }) => {\n  return (\n    <div className=\"container\">\n      <ReactMde\n        minEditorHeight={600}\n        value={mdContent}\n        onChange={(newValue): void => {\n          changeMdContent(newValue)\n        }}\n        classes={readOnly ? { reactMde: 'hide_toolbar' } : {}}\n        selectedTab={selectedTab as MdEditorType['selectedTab']}\n        onTabChange={changeSelectedTab}\n        generateMarkdownPreview={(markdown: string): Promise<any> => Promise.resolve(converter.makeHtml(markdown))}\n      />\n    </div>\n  )\n}\nexport default MdEditor\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { Layout } from 'antd'\nimport MdEditor from './MdEditor'\n\nconst { Content } = Layout\ninterface MdContentType {\n  returnNewMdContent: Function\n  currentDirName: string\n  currentCateName: string\n  currentFileName: string\n  isReadOnly: boolean\n}\n\nconst MdContent: React.FC<MdContentType> = ({\n  returnNewMdContent,\n  currentDirName,\n  currentCateName,\n  currentFileName,\n  isReadOnly,\n}) => {\n  const [mdContent, setMdContent] = useState('')\n  const [selectedTab, setSelectedTab] = useState('preview')\n  useEffect(() => {\n    if (currentFileName) {\n      axios\n        .get(`${process.env.PUBLIC_URL}/api/${currentDirName}/${currentCateName}/${currentFileName}`)\n        .then((res) => {\n          setMdContent(res.data)\n        })\n        .catch((err) => {})\n    } else {\n      setMdContent('')\n    }\n  }, [currentCateName, currentDirName, currentFileName, setMdContent])\n  useEffect(() => {\n    setSelectedTab(!currentFileName ? 'write' : 'preview')\n  }, [currentFileName])\n  useEffect(() => {\n    returnNewMdContent(mdContent)\n  }, [mdContent, returnNewMdContent])\n  return (\n    <Content\n      className=\"site-layout-background\"\n      style={{\n        margin: 0,\n        minHeight: 280,\n      }}\n    >\n      <MdEditor\n        mdContent={mdContent}\n        selectedTab={selectedTab as 'preview' | 'write'}\n        changeSelectedTab={setSelectedTab}\n        changeMdContent={setMdContent}\n        readOnly={isReadOnly}\n      />\n    </Content>\n  )\n}\nexport default MdContent\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { Layout, Menu } from 'antd'\nimport { UserOutlined } from '@ant-design/icons'\nimport { Link } from 'react-router-dom'\n\nconst { Sider } = Layout\nconst { SubMenu } = Menu\ntype itemType = string\ninterface DirectoryType {\n  [key: string]: Array<itemType>\n}\ninterface AppSidebarType {\n  currentDirName: string\n  currentCateName: string\n  currentFileName: string\n}\nconst AppSidebar: React.FC<AppSidebarType> = ({ currentDirName, currentCateName, currentFileName }) => {\n  const [fileDirs, setFileDirs] = useState({})\n  useEffect(() => {\n    axios\n      .get(`${process.env.PUBLIC_URL}/api/files/${currentDirName}`)\n      .then((res) => {\n        setFileDirs(res.data)\n      })\n      .catch((err) => {})\n  }, [currentDirName])\n  return (\n    <Sider width={300} className=\"site-layout-background\">\n      {Object.keys(fileDirs).length && (\n        <Menu\n          mode=\"inline\"\n          selectedKeys={[currentFileName]}\n          defaultOpenKeys={[currentCateName]}\n          style={{ height: '100%', borderRight: 0 }}\n        >\n          {Object.entries(fileDirs as DirectoryType).map(([dirName, fileNames]) => (\n            <SubMenu key={dirName} icon={<UserOutlined />} title={dirName}>\n              {fileNames.map((fileName: itemType) => (\n                <Menu.Item key={fileName} title={fileName}>\n                  <Link to={`${fileName}`}>{fileName.split('.')[0]}</Link>\n                </Menu.Item>\n              ))}\n            </SubMenu>\n          ))}\n        </Menu>\n      )}\n    </Sider>\n  )\n}\nexport default AppSidebar\n","import React, { useState, useEffect } from 'react'\nimport { Input, Space } from 'antd'\nimport { SaveOutlined, PlusOutlined, HomeOutlined } from '@ant-design/icons'\n\nimport { Link } from 'react-router-dom'\n\ninterface BreadCrumbHeaderType {\n  saveItem: Function\n  currentDirName: string\n  currentCateName: string\n  currentFileName: string\n  isReadOnly: boolean\n}\nconst BreadCrumbHeader: React.FC<BreadCrumbHeaderType> = ({\n  saveItem,\n  currentDirName,\n  currentCateName,\n  currentFileName,\n  isReadOnly,\n}) => {\n  const [fileName, setFileName] = useState(currentFileName)\n  useEffect(() => {\n    setFileName(currentFileName)\n  }, [currentFileName])\n  return (\n    <div style={{ margin: '16px 0' }}>\n      <Space>\n        <Link className=\"text\" to=\"/\">\n          <HomeOutlined />\n        </Link>\n        {currentDirName} / {currentCateName} /\n        <Input\n          style={{ width: '300px' }}\n          value={fileName}\n          onChange={(e): void => {\n            setFileName(e.target.value)\n          }}\n          readOnly={isReadOnly}\n        />\n        {!isReadOnly && (\n          <>\n            <SaveOutlined\n              onClick={(): void => {\n                saveItem(fileName)\n              }}\n            />\n            <Link to={`/${currentDirName}/${currentCateName}`}>\n              <PlusOutlined />\n            </Link>\n          </>\n        )}\n      </Space>\n    </div>\n  )\n}\nexport default BreadCrumbHeader\n","import React, { useState, useEffect } from 'react'\nimport { Layout, message } from 'antd'\nimport axios from 'axios'\nimport { useLocation } from 'react-router-dom'\nimport MdContent from './Content/MdContent'\nimport AppSidebar from './Sidebar'\nimport BreadCrumb from './BreadCrumb'\n\nconst Container: React.FC = () => {\n  const { pathname } = useLocation()\n  const [, currentDirName, currentCateName, currentFileName] = pathname.split('/')\n  const [mdContent, setMdContent] = useState('')\n  const [isReadOnly, setIsReadOnly] = useState(false)\n  useEffect(() => {\n    axios.get(`${process.env.PUBLIC_URL}/api/auth`).then((res) => {\n      setIsReadOnly(!res.data)\n    })\n  }, [])\n\n  const postMdContent = (newFileName: string): void => {\n    axios\n      .post(`${process.env.PUBLIC_URL}/api/files/upload`, {\n        name: `${currentDirName}/${currentCateName}/${newFileName}`,\n        mdContent,\n      })\n      .then((res) => {\n        message.success(res.statusText)\n      })\n      .catch((error) => {\n        message.error(error.message)\n      })\n  }\n  return (\n    <Layout>\n      <AppSidebar currentDirName={currentDirName} currentCateName={currentCateName} currentFileName={currentFileName} />\n      <Layout style={{ padding: '0 24px 24px' }}>\n        <BreadCrumb\n          currentDirName={currentDirName}\n          currentCateName={currentCateName}\n          currentFileName={currentFileName}\n          isReadOnly={isReadOnly}\n          saveItem={(newFileName: string): void => {\n            postMdContent(newFileName)\n          }}\n        />\n        <MdContent\n          isReadOnly={isReadOnly}\n          currentDirName={currentDirName}\n          currentCateName={currentCateName}\n          currentFileName={currentFileName}\n          returnNewMdContent={(value: string): void => {\n            setMdContent(value)\n          }}\n        />\n      </Layout>\n    </Layout>\n  )\n}\nexport default Container\n","import React from 'react'\nimport './App.css'\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport Home from '../Pages/Home'\nimport Docs from '../Pages/Docs'\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/:fileId\">\n          <Docs />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}