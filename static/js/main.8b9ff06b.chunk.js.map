{"version":3,"sources":["Pages/Home/index.tsx","Pages/Docs/Content/MdEditor.tsx","Pages/Docs/Content/MdContent.tsx","Pages/Docs/Sidebar.tsx","Pages/Docs/BreadCrumb.tsx","Pages/Docs/index.tsx","App/App.tsx","serviceWorker.js","index.tsx"],"names":["Banner","styled","div","process","Divider","Home","useState","fileDirs","setFileDirs","useEffect","axios","get","then","res","data","catch","err","style","fontSize","fontFamily","position","left","top","color","stdTypingDelay","avgTypingDelay","cursor","show","Delay","ms","Array","fill","map","index","key","float","justify","marginTop","span","Object","entries","categoryName","categoryDirs","marginBottom","categoryDir","fileDirName","fileNames","className","counterIncrement","fileName","href","replace","converter","Showdown","tables","simplifiedAutoLink","strikethrough","tasklists","MdEditor","mdContent","changeMdContent","selectedTab","changeSelectedTab","readOnly","minEditorHeight","value","onChange","newValue","classes","reactMde","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","makeHtml","Content","Layout","MdContent","returnNewMdContent","currentDirName","currentCateName","currentFileName","isReadOnly","setMdContent","setSelectedTab","margin","minHeight","Sider","SubMenu","Menu","AppSidebar","width","keys","length","mode","selectedKeys","defaultOpenKeys","height","borderRight","dirName","icon","UserOutlined","title","Item","to","split","BreadCrumbHeader","saveItem","setFileName","HomeOutlined","e","target","SaveOutlined","onClick","PlusOutlined","Container","useLocation","pathname","setIsReadOnly","padding","BreadCrumb","newFileName","post","name","message","success","statusText","error","postMdContent","App","path","Docs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.8b9ff06b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport { Row, Col, Popconfirm, Button } from 'antd'\r\nimport styled from 'styled-components'\r\nimport Typist from 'react-typist'\r\n\r\nconst Banner = styled.div`\r\n  background-image: url(${process.env.PUBLIC_URL}/anime-girl.jpeg);\r\n  background-size: cover;\r\n  height: 600px;\r\n  background-position-y: -120px;\r\n`\r\nconst Divider = styled.div`\r\n  border-bottom: 1px solid #ebebeb;\r\n  margin-bottom: 16px;\r\n  padding-bottom: 8px;\r\n`\r\n\r\ntype itemType = { [key: string]: string[] }\r\ninterface DirectoryType {\r\n  [key: string]: Array<itemType>\r\n}\r\nconst Home: React.FC = () => {\r\n  const [fileDirs, setFileDirs] = useState({})\r\n  useEffect(() => {\r\n    axios\r\n      .get(`./api/files`)\r\n      .then((res) => {\r\n        setFileDirs(res.data)\r\n      })\r\n      .catch((err) => { })\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <Banner>\r\n        <div style={{fontSize: '16px', fontFamily: 'Courier', position: 'absolute', left: '10px', top: '20px', color: 'white'}}>\r\n          <Typist stdTypingDelay={10} avgTypingDelay={40} cursor={{show: false}}>\r\n          <p> Hi hhhapz </p>\r\n          <p> I have one very important thing I want to say to you! </p>\r\n          <p> I really hope this won't ruin our friendship... </p>\r\n          <p> I have been thinking about it for a while.... </p>\r\n          <p> But I still think I need to tell you this! </p>\r\n          <p> .................................... </p>\r\n          <p> ------------------------------------ </p>\r\n          <Typist.Delay ms={500}/>\r\n          {new Array(10).fill(0).map((index)=>(\r\n            <div key={index} style={{float: 'left'}}>\r\n             <p>I have a pen</p>\r\n             <p>I have a apple</p>\r\n             <p>Uhhh!</p>\r\n             <p>Apple pen</p>\r\n              <p>I have a pen</p>\r\n              <p>I have pineapple</p>\r\n              <p>Uhhh!</p>\r\n              <p>Pineapple pen</p>\r\n              <span>Apple pen...</span>\r\n              <br/><span >Pineapple pen...</span>\r\n              <br/><span>Uh!</span><br/>\r\n              <span>Pen Pineapple Apple Pen</span><br/>\r\n              <span>Pen Pineapple Apple Pen</span><br/>\r\n              <span >Pen Pineapple, Pen Pen Pen Apple Apple</span><br/>\r\n              <span >Pen Pineapple, Pen Pen Pen Apple Pen</span><br/>\r\n              <span>Pen Pineapple, Pen Pen Pen Apple Apple</span><br/>\r\n              <span>Pen Pineapple, Pen Pen Pen Apple Apple</span><br/>\r\n              <span>Pen Pineapple, Pen Pen Pen Apple Pen</span><br/>\r\n              <span>Pen Pineapple, Pen Pen Pen Apple Apple</span><br/>\r\n              <span>Pen Pineapple, Pen Pen Pen Apple Apple</span><br/>\r\n              <span >Pen Pineapple, Pen Pen Pen Apple Pen</span><br/>\r\n              <span>Pen Pineapple, Pen Pen Pen Apple Apple</span>\r\n            </div>\r\n          ))}\r\n          \r\n          </Typist>\r\n        </div>\r\n      </Banner>\r\n      <Row justify=\"center\" style={{ marginTop: '20px' }}>\r\n        <Col span={16}>\r\n          {Object.entries(fileDirs as DirectoryType).map(([categoryName, categoryDirs]) => (\r\n            <div key={categoryName} style={{ marginTop: '40px' }}>\r\n              <h2 style={{ marginBottom: '40px' }}>{categoryName}</h2>\r\n              {categoryDirs.map((categoryDir) =>\r\n                Object.entries(categoryDir).map(([fileDirName, fileNames]) => (\r\n                  <section\r\n                    key={fileDirName}\r\n                    className=\"section\"\r\n                    style={{ marginBottom: '24px', counterIncrement: 'a' }}\r\n                  >\r\n                    <h3>{fileDirName}</h3>\r\n                    <Divider />\r\n                    <ul className=\"list\">\r\n                      {fileNames.map((fileName: string) => (\r\n                        <li className=\"list_item\" key={fileName}>\r\n                          <div>\r\n                            <a href={`./${categoryName}/${fileDirName}/${fileName}`}>{fileName.replace('.md', '')}</a>\r\n                          </div>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </section>\r\n                ))\r\n              )}\r\n            </div>\r\n          ))}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\nexport default Home\r\n","import React from 'react'\r\nimport ReactMde from 'react-mde'\r\nimport * as Showdown from 'showdown'\r\nimport 'react-mde/lib/styles/css/react-mde-all.css'\r\n\r\ninterface MdEditorType {\r\n  mdContent: string\r\n  changeMdContent: Function\r\n  selectedTab: 'write' | 'preview'\r\n  changeSelectedTab: (tab: 'preview' | 'write') => void\r\n  readOnly: boolean\r\n}\r\nconst converter = new Showdown.Converter({\r\n  tables: true,\r\n  simplifiedAutoLink: true,\r\n  strikethrough: true,\r\n  tasklists: true,\r\n})\r\nconst MdEditor: React.FC<MdEditorType> = ({ mdContent, changeMdContent, selectedTab, changeSelectedTab, readOnly }) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <ReactMde\r\n        minEditorHeight={600}\r\n        value={mdContent}\r\n        onChange={(newValue): void => {\r\n          changeMdContent(newValue)\r\n        }}\r\n        classes={readOnly ? { reactMde: 'hide_toolbar' } : {}}\r\n        selectedTab={selectedTab as MdEditorType['selectedTab']}\r\n        onTabChange={changeSelectedTab}\r\n        generateMarkdownPreview={(markdown: string): Promise<any> => Promise.resolve(converter.makeHtml(markdown))}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nexport default MdEditor\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport { Layout } from 'antd'\r\nimport MdEditor from './MdEditor'\r\n\r\nconst { Content } = Layout\r\ninterface MdContentType {\r\n  returnNewMdContent: Function\r\n  currentDirName: string\r\n  currentCateName: string\r\n  currentFileName: string\r\n  isReadOnly: boolean\r\n}\r\n\r\nconst MdContent: React.FC<MdContentType> = ({\r\n  returnNewMdContent,\r\n  currentDirName,\r\n  currentCateName,\r\n  currentFileName,\r\n  isReadOnly,\r\n}) => {\r\n  const [mdContent, setMdContent] = useState('')\r\n  const [selectedTab, setSelectedTab] = useState('preview')\r\n  useEffect(() => {\r\n    if (currentFileName) {\r\n      axios\r\n        .get(`${process.env.PUBLIC_URL}/api/${currentDirName}/${currentCateName}/${currentFileName}`)\r\n        .then((res) => {\r\n          setMdContent(res.data)\r\n        })\r\n        .catch((err) => {})\r\n    } else {\r\n      setMdContent('')\r\n    }\r\n  }, [currentCateName, currentDirName, currentFileName, setMdContent])\r\n  useEffect(() => {\r\n    setSelectedTab(!currentFileName ? 'write' : 'preview')\r\n  }, [currentFileName])\r\n  useEffect(() => {\r\n    returnNewMdContent(mdContent)\r\n  }, [mdContent, returnNewMdContent])\r\n  return (\r\n    <Content\r\n      className=\"site-layout-background\"\r\n      style={{\r\n        margin: 0,\r\n        minHeight: 280,\r\n      }}\r\n    >\r\n      <MdEditor\r\n        mdContent={mdContent}\r\n        selectedTab={selectedTab as 'preview' | 'write'}\r\n        changeSelectedTab={setSelectedTab}\r\n        changeMdContent={setMdContent}\r\n        readOnly={isReadOnly}\r\n      />\r\n    </Content>\r\n  )\r\n}\r\nexport default MdContent\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport { Layout, Menu } from 'antd'\r\nimport { UserOutlined } from '@ant-design/icons'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst { Sider } = Layout\r\nconst { SubMenu } = Menu\r\ntype itemType = string\r\ninterface DirectoryType {\r\n  [key: string]: Array<itemType>\r\n}\r\ninterface AppSidebarType {\r\n  currentDirName: string\r\n  currentCateName: string\r\n  currentFileName: string\r\n}\r\nconst AppSidebar: React.FC<AppSidebarType> = ({ currentDirName, currentCateName, currentFileName }) => {\r\n  const [fileDirs, setFileDirs] = useState({})\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${process.env.PUBLIC_URL}/api/files/${currentDirName}`)\r\n      .then((res) => {\r\n        setFileDirs(res.data)\r\n      })\r\n      .catch((err) => {})\r\n  }, [currentDirName])\r\n  return (\r\n    <Sider width={300} className=\"site-layout-background\">\r\n      {Object.keys(fileDirs).length && (\r\n        <Menu\r\n          mode=\"inline\"\r\n          selectedKeys={[currentFileName]}\r\n          defaultOpenKeys={[currentCateName]}\r\n          style={{ height: '100%', borderRight: 0 }}\r\n        >\r\n          {Object.entries(fileDirs as DirectoryType).map(([dirName, fileNames]) => (\r\n            <SubMenu key={dirName} icon={<UserOutlined />} title={dirName}>\r\n              {fileNames.map((fileName: itemType) => (\r\n                <Menu.Item key={fileName} title={fileName}>\r\n                  <Link to={`${fileName}`}>{fileName.split('.')[0]}</Link>\r\n                </Menu.Item>\r\n              ))}\r\n            </SubMenu>\r\n          ))}\r\n        </Menu>\r\n      )}\r\n    </Sider>\r\n  )\r\n}\r\nexport default AppSidebar\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Input, Space } from 'antd'\r\nimport { SaveOutlined, PlusOutlined, HomeOutlined } from '@ant-design/icons'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\ninterface BreadCrumbHeaderType {\r\n  saveItem: Function\r\n  currentDirName: string\r\n  currentCateName: string\r\n  currentFileName: string\r\n  isReadOnly: boolean\r\n}\r\nconst BreadCrumbHeader: React.FC<BreadCrumbHeaderType> = ({\r\n  saveItem,\r\n  currentDirName,\r\n  currentCateName,\r\n  currentFileName,\r\n  isReadOnly,\r\n}) => {\r\n  const [fileName, setFileName] = useState(currentFileName)\r\n  useEffect(() => {\r\n    setFileName(currentFileName)\r\n  }, [currentFileName])\r\n  return (\r\n    <div style={{ margin: '16px 0' }}>\r\n      <Space>\r\n        <Link className=\"text\" to=\"/\">\r\n          <HomeOutlined />\r\n        </Link>\r\n        {currentDirName} / {currentCateName} /\r\n        <Input\r\n          style={{ width: '300px' }}\r\n          value={fileName}\r\n          onChange={(e): void => {\r\n            setFileName(e.target.value)\r\n          }}\r\n          readOnly={isReadOnly}\r\n        />\r\n        {!isReadOnly && (\r\n          <>\r\n            <SaveOutlined\r\n              onClick={(): void => {\r\n                saveItem(fileName)\r\n              }}\r\n            />\r\n            <Link to={`/${currentDirName}/${currentCateName}`}>\r\n              <PlusOutlined />\r\n            </Link>\r\n          </>\r\n        )}\r\n      </Space>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbHeader\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Layout, message } from 'antd'\r\nimport axios from 'axios'\r\nimport { useLocation } from 'react-router-dom'\r\nimport MdContent from './Content/MdContent'\r\nimport AppSidebar from './Sidebar'\r\nimport BreadCrumb from './BreadCrumb'\r\n\r\nconst Container: React.FC = () => {\r\n  const { pathname } = useLocation()\r\n  const [, currentDirName, currentCateName, currentFileName] = pathname.split('/')\r\n  const [mdContent, setMdContent] = useState('')\r\n  const [isReadOnly, setIsReadOnly] = useState(false)\r\n  useEffect(() => {\r\n    axios.get(`${process.env.PUBLIC_URL}/api/auth`).then((res) => {\r\n      setIsReadOnly(!res.data)\r\n    })\r\n  }, [])\r\n\r\n  const postMdContent = (newFileName: string): void => {\r\n    axios\r\n      .post(`${process.env.PUBLIC_URL}/api/files/upload`, {\r\n        name: `${currentDirName}/${currentCateName}/${newFileName}`,\r\n        mdContent,\r\n      })\r\n      .then((res) => {\r\n        message.success(res.statusText)\r\n      })\r\n      .catch((error) => {\r\n        message.error(error.message)\r\n      })\r\n  }\r\n  return (\r\n    <Layout>\r\n      <AppSidebar currentDirName={currentDirName} currentCateName={currentCateName} currentFileName={currentFileName} />\r\n      <Layout style={{ padding: '0 24px 24px' }}>\r\n        <BreadCrumb\r\n          currentDirName={currentDirName}\r\n          currentCateName={currentCateName}\r\n          currentFileName={currentFileName}\r\n          isReadOnly={isReadOnly}\r\n          saveItem={(newFileName: string): void => {\r\n            postMdContent(newFileName)\r\n          }}\r\n        />\r\n        <MdContent\r\n          isReadOnly={isReadOnly}\r\n          currentDirName={currentDirName}\r\n          currentCateName={currentCateName}\r\n          currentFileName={currentFileName}\r\n          returnNewMdContent={(value: string): void => {\r\n            setMdContent(value)\r\n          }}\r\n        />\r\n      </Layout>\r\n    </Layout>\r\n  )\r\n}\r\nexport default Container\r\n","import React from 'react'\r\nimport './App.css'\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\r\nimport Home from '../Pages/Home'\r\nimport Docs from '../Pages/Docs'\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/:fileId\">\r\n          <Docs />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Home />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}